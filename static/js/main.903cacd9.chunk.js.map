{"version":3,"sources":["components/nav/nav.tsx","components/header/header.tsx","components/home/helpers.tsx","components/home/home.tsx","data.tsx","components/not-found/not-found.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavComponent","HeaderComponent","getCurrentDate","date","Date","d","ts","n","strDate","getFullYear","getMonth","getDate","dayOfWeekString","0","1","2","3","4","5","6","7","data","person","vehicle","setLastIDNumber","lastIDNumber","entity","callback","_","canGoOut","validLastIDNumbers","some","v","canGoOutWeek","currentWeek","w0","getDay","dates","i","push","setDate","getCurrentWeek","result","forEach","day","messageForToday","state","YES","NO","ERROR","UNDEFINED","HomeComponent","useState","canPersonGoOut","setCanPersonGoOut","canVehicleGoOut","setCanVehicleGoOut","className","onClick","JSON","stringify","NotFoundComponent","history","createBrowserHistory","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.903cacd9.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport { getLabel } from 'texts'\nimport { NavConf, Link } from './nav.types'\n\nconst navConf: NavConf = {\n  links: {\n    home: { path: '/home', name: 'Inicio' },\n  },\n  activeClassName: 'active',\n}\n\nconst useGetActivePathName = (): string => {\n  const location = useLocation()\n  const link = navConf.links[location.pathname]\n  return getLabel(link?.name)\n}\n\nconst genetareLink = (linkName: string): JSX.Element => {\n  return (\n    <NavLink\n      key={navConf.links[linkName].path}\n      to={navConf.links[linkName].path}\n      activeClassName={navConf.activeClassName}>\n      {navConf.links[linkName].name}\n    </NavLink>\n  )\n}\n\nconst NavComponent: React.FC = (): JSX.Element => {\n  return <div></div>\n}\n\nexport { NavComponent, useGetActivePathName }\n","import React from 'react'\n\nconst HeaderComponent: React.FC = (): JSX.Element => {\n  return <div></div>\n}\n\nexport { HeaderComponent }\n","import { Day } from './home.types'\n\nexport const getCurrentDate = (date: Date = new Date()): string => {\n  const d = date || new Date()\n  const ts = (n: number): string => (n < 10 ? '0' + n : n >= 100 ? '' + (n - 2000) : '' + n)\n  const strDate = `${ts(d.getFullYear())}/${ts(d.getMonth() + 1)}/${ts(d.getDate())}`\n  return strDate\n}\n\nexport const getCurrentWeek = (): string[] => {\n  const d = new Date()\n  const w0 = d.getDate() - d.getDay()\n  const dates: string[] = []\n  for (let i = 0; i <= 6; i++) {\n    dates.push(getCurrentDate(new Date(d.setDate(w0 + i))))\n  }\n  return dates\n}\n\nexport const dayOfWeekString: { [n: number]: Day } = {\n  0: 'Domingo',\n  1: 'Lunes',\n  2: 'Martes',\n  3: 'Miércoles',\n  4: 'Jueves',\n  5: 'Viernes',\n  6: 'Sábado',\n  7: 'Domingo',\n}\n","import React, { useState } from 'react'\nimport { pico_y_cedula, pico_y_placa } from '../../data'\nimport { SetState, Entity, GoOutState, GoOutWeekState } from './home.types'\nimport { getCurrentDate, getCurrentWeek, dayOfWeekString } from './helpers'\n\nconst data = { person: pico_y_cedula, vehicle: pico_y_placa }\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst setLastIDNumber = (lastIDNumber: number, entity: Entity, callback: SetState) => (_: unknown) => {\n  callback(canGoOut(lastIDNumber, entity))\n}\n\nconst canGoOut = (lastIDNumber: number, entity: Entity, date = ''): GoOutState => {\n  const validLastIDNumbers = data[entity][date || getCurrentDate()]\n  if (!validLastIDNumbers) return 'ERROR'\n  return validLastIDNumbers.some(v => v === lastIDNumber) ? 'YES' : 'NO'\n}\n\nconst canGoOutWeek = (lastIDNumber: number, entity: Entity): GoOutWeekState => {\n  const currentWeek = getCurrentWeek()\n  const result: GoOutWeekState = []\n  currentWeek.forEach((date, i) => {\n    result.push({ canGoOut: canGoOut(lastIDNumber, entity, date), day: dayOfWeekString[i] })\n  })\n  return result\n}\n\nconst messageForToday = (state: GoOutState, entity: Entity): string => {\n  // Esto es solo para mostrar los datos y ya, se puede borrar eventualmente\n  const messages = {\n    YES: { person: 'Puedes salir', vehicle: 'Puedes conducir' },\n    NO: { person: 'NO puedes salir', vehicle: 'NO puedes conducir' },\n    ERROR: {\n      person: 'No hay información del pico y cédula de hoy',\n      vehicle: 'No hay información del pico y placa de hoy',\n    },\n    UNDEFINED: {\n      person: 'No ha ingresado el último dígito de su cédula',\n      vehicle: 'No ha ingresado el último dígito de su placa',\n    },\n  }\n  return messages[state][entity]\n}\n\nconst HomeComponent: React.FC = (): JSX.Element => {\n  const [canPersonGoOut, setCanPersonGoOut] = useState<GoOutState>('UNDEFINED')\n  const [canVehicleGoOut, setCanVehicleGoOut] = useState<GoOutState>('UNDEFINED')\n  return (\n    <div className=\"App\">\n      <div className=\"person-last-id-number\">\n        <button onClick={setLastIDNumber(1, 'person', setCanPersonGoOut)}>1</button>\n        <button onClick={setLastIDNumber(2, 'person', setCanPersonGoOut)}>2</button>\n        <button onClick={setLastIDNumber(3, 'person', setCanPersonGoOut)}>3</button>\n        <button onClick={setLastIDNumber(4, 'person', setCanPersonGoOut)}>4</button>\n        <button onClick={setLastIDNumber(5, 'person', setCanPersonGoOut)}>5</button>\n        <button onClick={setLastIDNumber(6, 'person', setCanPersonGoOut)}>6</button>\n        <button onClick={setLastIDNumber(7, 'person', setCanPersonGoOut)}>7</button>\n        <button onClick={setLastIDNumber(8, 'person', setCanPersonGoOut)}>8</button>\n        <button onClick={setLastIDNumber(9, 'person', setCanPersonGoOut)}>9</button>\n        <button onClick={setLastIDNumber(0, 'person', setCanPersonGoOut)}>0</button>\n      </div>\n      <div className=\"vehicle-last-id-number\">\n        <button onClick={setLastIDNumber(1, 'vehicle', setCanVehicleGoOut)}>1</button>\n        <button onClick={setLastIDNumber(2, 'vehicle', setCanVehicleGoOut)}>2</button>\n        <button onClick={setLastIDNumber(3, 'vehicle', setCanVehicleGoOut)}>3</button>\n        <button onClick={setLastIDNumber(4, 'vehicle', setCanVehicleGoOut)}>4</button>\n        <button onClick={setLastIDNumber(5, 'vehicle', setCanVehicleGoOut)}>5</button>\n        <button onClick={setLastIDNumber(6, 'vehicle', setCanVehicleGoOut)}>6</button>\n        <button onClick={setLastIDNumber(7, 'vehicle', setCanVehicleGoOut)}>7</button>\n        <button onClick={setLastIDNumber(8, 'vehicle', setCanVehicleGoOut)}>8</button>\n        <button onClick={setLastIDNumber(9, 'vehicle', setCanVehicleGoOut)}>9</button>\n        <button onClick={setLastIDNumber(0, 'vehicle', setCanVehicleGoOut)}>0</button>\n      </div>\n      <div>{messageForToday(canPersonGoOut, 'person')}</div>\n      <div>{messageForToday(canVehicleGoOut, 'vehicle')}</div>\n      {/* Estos json son para mostrar los datos planos porque me dio pereza organizarlos */}\n      <div>{JSON.stringify(canGoOutWeek(0, 'person'))}</div>\n      <div>{JSON.stringify(canGoOutWeek(0, 'vehicle'))}</div>\n    </div>\n  )\n}\n\nexport { HomeComponent }\n","const pico_y_cedula: { [date: string]: number[] } = {\n  '20/07/31': [1, 3, 5, 7, 9],\n}\n\nconst pico_y_placa: { [date: string]: number[] } = {\n  '20/07/31': [2, 0],\n}\n\nexport { pico_y_cedula, pico_y_placa }\n","import React from 'react'\n\nconst NotFoundComponent: React.FC = (): JSX.Element => {\n  return <div>404 Not found</div>\n}\n\nexport { NotFoundComponent }\n","import React from 'react'\nimport './App.css'\nimport { Router, Switch, Route } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport { NavComponent, HeaderComponent, HomeComponent, NotFoundComponent } from './components/index'\n\nconst history = createBrowserHistory()\n\nconst App: React.FC = (): JSX.Element => {\n  return (\n    <Router history={history}>\n      <div>\n        <NavComponent />\n      </div>\n      <div>\n        <HeaderComponent />\n      </div>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={HomeComponent} />\n          <Route exact path=\"*\" component={NotFoundComponent} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}